# Функція перевіряє, чи можна розставити n корів з мінімальною відстанню d
# у заданих інтервалах
def can_place_cows(intervals, n, d):
    count = 0  # Лічильник розміщених корів
    last_pos = None  # Остання позиція, де була поставлена корова
    # Проходимо по всіх інтервалах
    for a, b in intervals:
        # Визначаємо початкову позицію для розміщення корови
        pos = a if last_pos is None else max(a, last_pos + d)
        # Поки можна розміщувати корів в цьому інтервалі
        while pos <= b:
            count += 1  # Додаємо ще одну корову
            if count == n:  # Якщо всі корови розміщені, повертаємо True
                return True
            last_pos = pos  # Оновлюємо останню зайняту позицію
            pos += d  # Переміщаємося на відстань d вперед
    return False  # Якщо не вдалося розставити всіх корів, повертаємо False

# Функція знаходить максимальну мінімальну відстань між коровами
def max_min_distance(n, intervals):
    # Визначаємо межі бінарного пошуку
    left, right = 1, intervals[-1][1] - intervals[0][0]
    ans = 1  # Початковий варіант відповіді
    # Проводимо бінарний пошук по мінімальній відстані
    while left <= right:
        mid = (left + right) // 2  # Середина поточного діапазону
        # Якщо можемо розставити корів на відстані mid, оновлюємо відповідь
        if can_place_cows(intervals, n, mid):
            ans = mid  # Запам'ятовуємо поточний кращий результат
            left = mid + 1  # Пробуємо більшу відстань
        else:
            right = mid - 1  # Якщо не вдалося, пробуємо меншу відстань
    return ans  # Повертаємо максимальну мінімальну відстань

# Зчитуємо вхідні дані
n, m = map(int, input().split())  # Кількість корів і кількість інтервалів
intervals = [tuple(map(int, input().split())) for _ in range(m)]  # Зчитуємо інтервали
intervals.sort()  # Сортуємо інтервали за початком
# Знаходимо та виводимо відповідь
print(max_min_distance(n, intervals))
