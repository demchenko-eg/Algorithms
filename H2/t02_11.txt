Складність f(n) = O(n)

def g(n):
    sum = 0
    for i in range(1, n + 1):
        sum = sum + i + f(i)
    return sum

Складність g(n) = O(n^2)

1 - 1+1 = 2*1
2 - 1+2+1+1+2 = 3*1 + 2*2
3 - 1+2+3+1+1+2+1+2+3 = 4*1 + 3*2 + 2*3
4 - 1+2+3+4+1+1+2+1+2+3+1+2+3+4 = 5*1 + 4*2 + 3*3 + 2*4
n - (n+1)*1 + n*2 + ... + 3*(n-1) + 2*n

Сума всіх чисел від 1 до n і ще раз всі попередні суми

Оптимізована функція із асимптотичною оцінкою O(n):

def g(n):
    sum = 0
    for i in range(1, n + 1):
        sum = sum + i + (i * (i + 1) / 2)
    return sum


  sum_:{i=1}^{n}(i + (i * (i + 1) / 2)) =
= sum_:{i=1}^{n} i + sum_:{i=1}^{n} (i * (i + 1) / 2) =
= n * (n + 1) / 2 + sum_:{i=1}^{n} (i * (i + 1) / 2) =
= n * (n + 1) / 2 + 1/2 * sum_:{i=1}^{n} (i^2 + i) =
= n * (n + 1) / 2 + 1/2 * (sum_:{i=1}^{n} (i^2) + sum_:{i=1}^{n} i) =
= n * (n + 1) / 2 + 1/2 * (n * (n + 1) / 2 + n * (n + 1) * (2n + 1) / 6) =
= n * (n + 1) / 2 + n * (n + 1) / 4 + n * (n + 1) * (2n + 1) / 12 =
= (9n * (n + 1) + n * (n + 1) * (2n + 1)) / 12 =
= (2n + 10) * n * (n + 1) / 12 =
= n * (n + 1) * (n + 5) / 12

Оптимізована функція зіз асимптотичною оцінкою O(1):
def g(n):
    return n * (n + 1) * (n + 5) / 6